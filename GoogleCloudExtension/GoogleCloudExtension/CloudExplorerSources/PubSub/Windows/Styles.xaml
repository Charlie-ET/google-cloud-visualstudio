<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
xmlns:ui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0"
xmlns:shell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.14.0"
xmlns:common="clr-namespace:GoogleCloudExtension.CloudExplorerSources.PubSub.Common">
    <SolidColorBrush x:Key="PanelBackgroundBrush" Color="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowContentGridColorKey}}"/>
    <SolidColorBrush x:Key="ContentBackgroundBrush" Color="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowBackgroundColorKey}}"/>

    <Style BasedOn="{StaticResource {x:Static shell:VsResourceKeys.ButtonStyleKey}}" TargetType="Button"/>
    <Style BasedOn="{StaticResource {x:Static shell:VsResourceKeys.CheckBoxStyleKey}}" TargetType="CheckBox"/>
    <Style BasedOn="{StaticResource {x:Static shell:VsResourceKeys.ComboBoxStyleKey}}" TargetType="ComboBox" />

    <Style TargetType="Control">
        <Setter Property="Background" Value="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
    </Style>

    <Style TargetType="Label">
        <Setter Property="FontFamily" Value="{DynamicResource VsFont.EnvironmentFontFamily}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
    </Style>

    <Style TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{DynamicResource VsFont.EnvironmentFontFamily}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
    </Style>

    <Style TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static common:ExtensionBrushes.TextBoxText}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static common:ExtensionBrushes.TextBoxBorder}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static common:ExtensionBrushes.TextBoxBackground}}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True"
                            Padding="2">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static common:ExtensionBrushes.TextBoxBorder}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static common:ExtensionBrushes.TextBoxBorderFocused}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="RadioButton">
        <Setter Property="FontFamily" Value="{DynamicResource VsFont.EnvironmentFontFamily}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static common:ExtensionBrushes.CheckBoxBackground}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static common:ExtensionBrushes.CheckBoxBorder}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness"  Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                CornerRadius="100"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="1,1,2,1" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{TemplateBinding Foreground}" MinWidth="8" MinHeight="8" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
                                          Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" 
                                                               Stroke="{DynamicResource {x:Static ui:EnvironmentColors.ToolWindowTextBrushKey}}" 
                                                               StrokeThickness="1" StrokeDashArray="1 2"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResourceExtension {x:StaticExtension common:ExtensionBrushes.CheckBoxBackgroundHover}}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource {x:Static common:ExtensionBrushes.CheckBoxBorderHover}}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResourceExtension {x:StaticExtension common:ExtensionBrushes.CheckBoxBorderHover}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResourceExtension {x:StaticExtension common:ExtensionBrushes.CheckBoxBackgroundHover}}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource {x:Static common:ExtensionBrushes.CheckBoxBorderHover}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>